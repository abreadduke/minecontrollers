{
    "name": "Registers",
    "icon": "minecraft:repeater",
    "category": "minecontrollers:casm",
    "pages": [
        {
            "type": "patchouli:text",
            "text": "Registers are volatile memory cells. When power is lost, registers are reset. Each register has its own specific role, but that doesn't mean you can't use them however you like."
        },
        {
            "type": "patchouli:text",
            "title": "AX",
            "text": "This register is used as an accumulator for arithmetic operations and for storing values for later use.$(br)It has subregisters: AH (high byte) and AL (low byte)."
        },
        {
            "type": "patchouli:text",
            "title": "BX",
            "text": "Typically used to store memory addresses or data. It can also be used similarly to AX.$(br)It has subregisters: BH (high byte) and BL (low byte)."
        },
        {
            "type": "patchouli:text",
            "title": "CX",
            "text": "This register is used as a counter for loop operations. It's also used in the loop instruction $(l:minecontrollers:casm/commands#loop)$().$(br)It has subregisters: CH (high byte) and CL (low byte)."
        },
        {
            "type": "patchouli:text",
            "title": "DX",
            "text": "Used for arithmetic operations and I/O operations.$(br)It contains subregisters: DH (high byte) and DL (low byte)."
        },
        {
            "type": "patchouli:text",
            "title": "DI",
            "text": "Destination index for array operations."
        },
        {
            "type": "patchouli:text",
            "title": "SI",
            "text": "Source index for array operations."
        },
        {
            "anchor": "bp",
            "type": "patchouli:text",
            "title": "BP",
            "text": "Base pointer within a function’s stack frame. It's used alongside SP and CS. Useful for recursion and functions, since it remains static and can be used as a reference for accessing local variables and arguments."
        },
        {
            "anchor": "sp",
            "type": "patchouli:text",
            "title": "SP",
            "text": "Stack pointer. The PUSH instruction decreases its value by 2 and stores the operand value at ss:sp. The POP instruction retrieves and clears data from ss:sp into the operand and increases SP by 2."
        },
        {
            "type": "patchouli:text",
            "title": "IP",
            "text": "Instruction pointer, which holds the address of the current instruction. By using the cs:ip pair, you can determine the exact location of code in memory.$(br)$(#ff0000)WARNING: DO NOT MODIFY THIS REGISTER MANUALLY. UNEXPECTED RESULTS MAY OCCUR."
        },
        {
            "type": "patchouli:text",
            "title": "FLAGS",
            "text": "This register contains flags that are set and used by instructions. Each flag is 1 bit wide. The following list describes the flags from most to least significant.$(br2)$(bold)FLAGS:$()$(li)$(bold)CF$() – carry flag. Set if an unsigned overflow occurs, such as when adding 0xFF and 1 using ADD."
        },
        {
            "type": "patchouli:text",
            "text": "The flag is not set if no overflow occurs.$(li)$(bold)ZF$() – zero flag. Set if the result of an operation is zero.$(li)$(bold)SF$() – sign flag. Set if the most significant bit of the result is 1.$(li)$(bold)IF$() – interrupt flag. Enables external interrupts if set to 1."
        },
        {
            "anchor": "segments",
            "type": "patchouli:text",
            "title": "SEGMENT REGISTERS",
            "text": "Segment registers play a key role in segmentation. You can only work with offsets using these registers. Each segment register controls its own memory region.$(br2)$(bold)DS$() – points to the data segment, where you store variables and arrays. It's the default base for labels."
        },
        {
            "type": "patchouli:text",
            "text": "$(bold)SS$() – points to the stack segment. This is the default base for SP and BP.$(br2)$(bold)CS$() – points to the code segment. Commonly used with IP to get the absolute address of the current instruction.$(br)$(#ff0000)WARNING: DO NOT MODIFY THIS REGISTER MANUALLY. UNEXPECTED RESULTS MAY OCCUR.$()$(br2)$(bold)ES$() – used to store an extra segment."
        },
        {
            "type": "patchouli:text",
            "title": "PIN REGISTERS",
            "text": "These registers allow you to read from and write to pins. To use them, refer to them as r[<pin_number>]."
        },
        {
            "anchor": "it",
            "type": "patchouli:text",
            "title": "IT",
            "text": "A special-purpose register that points to the interrupt table. To enable external interrupts, set IF to 1."
        }
    ]
}
