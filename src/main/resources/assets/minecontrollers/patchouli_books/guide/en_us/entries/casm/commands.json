{
    "name": "Commands and Opcodes",
    "icon": "minecraft:redstone_torch",
    "category": "minecontrollers:casm",
    "pages": [
        {
            "type": "patchouli:text",
            "text": "$(l:minecontrollers:casm/commands#nop)NOP - 0$()          $(l:minecontrollers:casm/commands#jle)JLE - 19$()$(br)$(l:minecontrollers:casm/commands#mov)MOV - 1$()          $(l:minecontrollers:casm/commands#jc)JC - 20$()$(br)$(l:minecontrollers:casm/commands#add)ADD - 2$()          $(l:minecontrollers:casm/commands#jnc)JNC - 21$()$(br)$(l:minecontrollers:casm/commands#sub)SUB - 3$()          $(l:minecontrollers:casm/commands#shl)SHL - 22$()$(br)$(l:minecontrollers:casm/commands#mul)MUL - 4$()          $(l:minecontrollers:casm/commands#shr)SHR - 23$()$(br)$(l:minecontrollers:casm/commands#div)DIV - 5$()          $(l:minecontrollers:casm/commands#sar)SAR - 24$()$(br)$(l:minecontrollers:casm/commands#inc)INC - 6$()          $(l:minecontrollers:casm/commands#rol)ROL - 25$()$(br)$(l:minecontrollers:casm/commands#dec)DEC - 7$()          $(l:minecontrollers:casm/commands#ror)ROR - 26$()$(br)$(l:minecontrollers:casm/commands#and)AND - 8$()          $(l:minecontrollers:casm/commands#rcl)RCL - 27$()$(br)$(l:minecontrollers:casm/commands#or)OR - 9$()           $(l:minecontrollers:casm/commands#rcr)RCR - 28$()$(br)$(l:minecontrollers:casm/commands#xor)XOR - 10$()         $(l:minecontrollers:casm/commands#push)PUSH - 29$()$(br)$(l:minecontrollers:casm/commands#not)NOT - 11$()         $(l:minecontrollers:casm/commands#pop)POP - 30$()"
        },
        {
            "type": "patchouli:text",
            "text": "$(l:minecontrollers:casm/commands#cmp)CMP - 12$()          $(l:minecontrollers:casm/commands#call)CALL - 31$()$(br)$(l:minecontrollers:casm/commands#jmp)JMP - 13$()          $(l:minecontrollers:casm/commands#ret)RET - 32$()$(br)$(l:minecontrollers:casm/commands#jz)JZ - 14$()           $(l:minecontrollers:casm/commands#int)INT - 33$()$(br)$(l:minecontrollers:casm/commands#jnz)JNZ - 15$()          $(l:minecontrollers:casm/commands#lea)LEA - 34$()$(br)$(l:minecontrollers:casm/commands#jg)JG - 16$()           $(l:minecontrollers:casm/commands#pusha)PUSHA - 35$()$(br)$(l:minecontrollers:casm/commands#jl)JL - 17$()           $(l:minecontrollers:casm/commands#popa)POPA - 36$()$(br)$(l:minecontrollers:casm/commands#jge)JGE - 18$()          $(l:minecontrollers:casm/commands#loop)LOOP - 37$()"
        },
        {
            "anchor": "nop",
            "type": "patchouli:text",
            "title": "NOP",
			"text": "Null operation. This command doesn't do anything, but still takes up a tick of runtime to execute. Useful for timers."
        },
        {
            "anchor": "mov",
            "type": "patchouli:text",
            "title": "MOV",
            "text": "Moves the value of the second operand into the first.$(br2)EXAMPLE: mov ax, bx; bx = 3$(br)copies the value of bx into ax (3)."
        },
        {
            "anchor": "add",
            "type": "patchouli:text",
            "title": "ADD",
			"text": "Adds the values of the first and second operands. The result is stored in the first operand. Affects the flags register $(br2)EXAMPLE: sum ax, bx; ax = 2, bx = 3$(br)ax now equals 5."
        },
        {
            "anchor": "sub",
            "type": "patchouli:text",
            "title": "SUB",
            "text": "Subtracts the second operand from the first. The result is stored in the first operand. Affects the flags register$(br2)EXAMPLE: sub ax, bx; ax = 6, bx = 2$(br)ax now equals 4."
        },
        {
            "anchor": "mul",
            "type": "patchouli:text",
            "title": "MUL",
            "text": "Multiplies the values of the first and second operands. The result is stored in the first operand. Affects the flags register.$(br2)EXAMPLE: mul ax, bx; ax = 6, bx = 2$(br)ax now equals 12."
        },
        {
            "anchor": "div",
            "type": "patchouli:text",
            "title": "DIV",
            "text": "Divides the first operand by the second. The result is stored in the first operand. Affects the flags register. The remainder is not stored$(br2)EXAMPLE: div ax, bx; ax = 6, bx = 2$(br)ax now equals 3."
        },
        {
            "anchor": "inc",
            "type": "patchouli:text",
            "title": "INC",
            "text": "Increments the first operand by 1. Affects the flags register.$(br2)EXAMPLE: inc ax; ax = 6$(br)ax now equals 7."
        },
        {
            "anchor": "dec",
            "type": "patchouli:text",
            "title": "DEC",
            "text": "Decrements the first operand by 1. Affects the flags register.$(br2)EXAMPLE: inc ax; ax = 6$(br)ax now equals 5."
        },
        {
            "anchor": "and",
            "type": "patchouli:text",
            "title": "AND",
            "text": "Performs a bitwise AND operations between the two operands. Affects the flags register.$(br2)EXAMPLE: and ax, bx; ax = 101b bx = 100b$(br)ax now equals 100b."
        },
        {
            "anchor": "or",
            "type": "patchouli:text",
            "title": "OR",
            "text": "Performs a bitwise OR between the two operands. Affects the flags register.$(br2)EXAMPLE: or ax, bx; ax = 100b bx = 1b$(br)ax now equals 101b."
        },
        {
            "anchor": "xor",
            "type": "patchouli:text",
            "title": "XOR",
            "text": "Performs a bitwise XOR (exclusive or) operation between the two operands. Affects the flags register.$(br2)EXAMPLE: xor ax, bx; ax = 100b bx = 101b$(br)ax now equals 1b."
        },
        {
            "anchor": "not",
            "type": "patchouli:text",
            "title": "NOT",
            "text": "Inverts all bits of the first operand. Affects the flags register$(br2)EXAMPLE: not ax; ax = 00000101b$(br)ax now equals 11111010b."
        },
        {
            "anchor": "cmp",
            "type": "patchouli:text",
            "title": "CMP",
            "text": "Compares both operands by subtracting the second from the first. The result is not stored, but the flags register is updated$(br2)EXAMPLE: cmp ax, bx; ax = bx$(br)ZF is set to 1 (Flags = 100b)"
        },
        {
            "anchor": "jmp",
            "type": "patchouli:text",
            "title": "JMP",
            "text": "Sets the IP register to the value of the first operand. If the operand includes a segment offset, the CS register will also be updated accordingly.$(br2)EXAMPLE: jmp foo; sets IP to the address of foo$(br)         jmp es:foo; sets IP to foo and updates CS with the value from ES"
        },
        {
            "anchor": "jz",
            "type": "patchouli:text",
            "title": "JZ",
            "text": "Performs jmp if ZF - 1."
        },
        {
            "anchor": "jnz",
            "type": "patchouli:text",
            "title": "JNZ",
            "text": "Performs jmp if ZF - 0."
        },
        {
            "anchor": "jg",
            "type": "patchouli:text",
            "title": "JG",
            "text": "Performs jmp if ZF and SF - 0."
        },
        {
            "anchor": "jl",
            "type": "patchouli:text",
            "title": "JL",
            "text": "Performs jmp if SF - 1."
        },
        {
            "anchor": "jge",
            "type": "patchouli:text",
            "title": "JGE",
            "text": "Performs jmp if SF - 0 or ZF - 1."
        },
        {
            "anchor": "jle",
            "type": "patchouli:text",
            "title": "JLE",
            "text": "Performs jmp if SF - 1 or ZF - 1."
        },
        {
            "anchor": "jc",
            "type": "patchouli:text",
            "title": "JC",
            "text": "Performs jmp if CF - 1."
        },
        {
            "anchor": "jnc",
            "type": "patchouli:text",
            "title": "JNC",
            "text": "Performs jmp if CF - 0."
        },
        {
            "anchor": "shl",
            "type": "patchouli:text",
            "title": "SHL",
            "text": "Shifts bits to the left.$(br2)EXAMPLE: shl ax, 2; ax = 10100000b$(br)ax now equals 10000000b"
        },
        {
            "anchor": "shr",
            "type": "patchouli:text",
            "title": "SHR",
            "text": "Shifts bits to the right.$(br2)EXAMPLE: shr ax, 2; ax = 10100000b$(br)ax now equals 00101000b"
        },
        {
            "anchor": "sar",
            "type": "patchouli:text",
            "title": "SAR",
            "text": "Shifts bits to the right while preserving the sign bit.$(br2)EXAMPLE: shr ax, 2; ax = 10100000b$(br)ax now equals 11101000b"
        },
        {
            "anchor": "rol",
            "type": "patchouli:text",
            "title": "ROL",
            "text": "Rotates bits to the left, meaning the most significant bit is moved to the least significant positions instead of being discarded.$(br2)EXAMPLE: rol ax, 2; ax = 10100000b$(br)ax now equals 10000010b"
        },
        {
            "anchor": "ror",
            "type": "patchouli:text",
            "title": "ROR",
            "text": "Same as ROL, but in the opposite direction. $(br2)EXAMPLE: ror ax, 2; ax = 10100001b$(br)ax now equals 01101000b"
        },
        {
            "anchor": "rcl",
            "type": "patchouli:text",
            "title": "RCL",
            "text": "Moves the most significant bit into CF and performs a left shift. The previous value of CF is shifted into the least significant bit.$(br2)EXAMPLE: rcl ax, 1; ax = 10100000b$(br)ax now equals 01000000b and CF = 1"
        },
        {
            "anchor": "rcr",
            "type": "patchouli:text",
            "title": "RCR",
            "text": "Same as RCL, but in the opposite direction. $(br2)EXAMPLE: rcl ax, 1; ax = 10100001b$(br)ax now equals 01010000b and CF = 1"
        },
        {
            "anchor": "push",
            "type": "patchouli:text",
            "title": "PUSH",
            "text": "Copies the value from the first operand onto the top of the stack."
        },
        {
            "anchor": "pop",
            "type": "patchouli:text",
            "title": "POP",
            "text": "Loads the value from the top of the stack into the first operand."
        },
        {
            "anchor": "call",
            "type": "patchouli:text",
            "title": "CALL",
            "text": "First performs a push of the IP register, then executes a jmp. If the operand includes a segment offset, the CS register is also pushed"
        },
        {
            "anchor": "ret",
            "type": "patchouli:text",
            "title": "RET",
            "text": "Clears the stack by the number of bytes specified in the first operand, then sets the IP register to the value previously pushed by CALL. If the second operand is 1, the CS register is also restored from the stack. If the second operand is 0xFF, it restores CS from the stack and subtracts the instruction length from IP, which is necessary when returning from an external interrupt."
        },
        {
            "anchor": "int",
            "type": "patchouli:text",
            "title": "INT",
            "text": "Executes an internal interrupt, which can perform a variety of functions. The first operand is the interrupt code. For more details on available interrupt codes, refer to the interrupt table."
        },
        {
            "anchor": "lea",
            "type": "patchouli:text",
            "title": "LEA",
            "text": "Calculates the effective address. This is one of the most unique instructions, as it is designed to work with a wide variety of values and addressing modes.$()The syntax is as follows: $(bold)lea destination_register, [base_register * scale + offset + index_register]$() or $(bold)lea destination_register,"
        },
        {
            "type": "patchouli:text",
            "text": "$(bold)base_register[offset + index_register]$(). The operand bytes for this instruction follow a different format.$(br2)The modifier byte for this instruction must be set to 3.$(br2)$(bold)First operand byte layout:$()$(li)$(bold)Bits 1–4$() – Destination register that will hold the result of the operation.$(li)$(bold)Bit 5$() – If set to 1, the index will be added."
        },
        {
            "type": "patchouli:text",
            "text": "$(li)$(bold)Bit 6$() – if set to 1, the offset will be included in the sum.$(li)$(bold)Bits 7–8$() – scale factor, which can be only: 00b = 0; 01b = 2; 10b = 4; 11b = 8.$(li)$(bold)Bits 9–16$() – base register ID.$(br2)$(bold)Second operand bytes$() – fully used for the offset value."
        },
        {
            "anchor": "pusha",
            "type": "patchouli:text",
            "title": "PUSHA",
            "text": "Stores the registers ax, bx, cx, dx, di, si, flags, ds, and ex onto the stack."
        },
        {
            "anchor": "popa",
            "type": "patchouli:text",
            "title": "POPA",
            "text": "Loads the registers ax, bx, cx, dx, di, si, flags, ds, and ex from the stack."
        },
        {
            "anchor": "loop",
            "type": "patchouli:text",
            "title": "LOOP",
            "text": "If cx != 0, a jump occurs to the specified address and the cx register is decremented."
        }
    ]
}