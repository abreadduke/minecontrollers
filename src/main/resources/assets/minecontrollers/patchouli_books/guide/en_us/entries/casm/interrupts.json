{
    "name": "Interrupts",
    "icon": "minecraft:comparator",
    "category": "minecontrollers:casm",
    "pages": [
        {
            "type": "patchouli:text",
			"text": "There are two types of interrupts.$(br)Internal interrupts can be called with INT $(l:minecontrollers:casm/interrupts#internal_ints)[<interrupt_name>]$(). You can view the list of standard internal interrupts $(l:minecontrollers:casm/interrupts#internal_ints)here$().$(br)External interrupts use a dedicated table, pointed to by the $(l:minecontrollers:casm/registers#it)IT$() register."
        },
        {
            "type": "patchouli:text",
			"text": "This table is an array of 64 words (1 word = 2 bytes), with each word corresponding to a pin with the same number. Each word should contain the absolute address of the interrupt handler that will be triggered when the redstone signal changes on the associated pin. If the value of the word is 0, the controller will not trigger an interrupt. To enable external interrupts, set bit 0 of the flags register to 1."
        },
        {
            "type": "patchouli:text",
            "text": "$(bold)$(#ff0000)WARNING:$() never set IF to 1 before assigning the IT register to a properly reserved interrupt table. If you do, any redstone signal change on the pins may trigger an interrupt from junk data in your code.$(br)When an external interrupt is triggered, the microcontroller saves the registers (similar to the PUSHA operation) and performs a call to the address [<offset_in_interrupt_table>]:0."
        },
        {
            "type": "patchouli:text",
			"text": "To restore your registers and complete the interrupt, you must add this code at the end of your interrupt handler:$(br)$(bold)POPA$(br)RET 0, 0xFF$()$(br)You should also reset your stack to the interrupt call state if you have modified it."
        },
        {
            "anchor": "internal_ints",
            "type": "patchouli:text",
            "title": "INTERNAL INT TABLE",
            "text": "$(li)$(bold)0$() - write the current game time into the registers ax, bx, cx and dx from most to least significant bit.$(li)$(bold)1$() - writes the current daytime value into the registers ax, bx, cx and dx from most to least significant bit.$(li)$(bold)2$() - if it is currently daytime, ax will be set to 1; otherwise, AX will be set to 0."
        },
        {
            "type": "patchouli:text",
			"text": "$(li)$(bold)3$() - The value of ax is set to 1 if it is raining. Otherwise, ax is set to 0.$(li)$(bold)4$() - The value of ax is set to 1 if there is a thunderstorm. Otherwise, ax is set to 0.$(li)$(bold)5$() - stores the sine and cosine of ax (in degrees), multiplied by 1000, into ax and bx respectively.$(li)$(bold)6$() - computes the natural log of ax, multiplies it by 1000, and stores it back into ax."
        },
        {
            "type": "patchouli:text",
			"text": "$(li)$(bold)7$() - raises ax to the power of [bx / 1000]. Division by 1000 is used to allow for floating-point exponents.$(li)$(bold)8$() - stores a random number in ax$(li)$(bold)9$() - pushes the coordinates of the microcontroller onto the stack.$(li)$(bold)10$() - stores the local coordinates of the first block the microcontroller is facing into bx, cx, and dx. If no block is found, ax is set to 0."
        },
        {
            "type": "patchouli:text",
            "text": "If found, ax is set to 1. The maximum detection distance is 128.$(li)$(bold)11$() - returns the number of entities within a radius defined by ax and stores the result back in ax.$(li)$(bold)12$() - counts the number of players within a radius defined by ax and stores the result back in ax$(li)$(bold)13$() - plays a note with the pitch cx (500-1000) and a radius defined by ax. bx determines the instrument ID."
        },
        {
            "type": "patchouli:text",
            "title": "MUSICAL INSTRUMENTS",
            "text": "$(bold)0 - BASEDRUM$(br)1 - BASS$(br)2 - BELL$(br)3 - CHIME$(br)4 - FLUTE$(br)5 - GUITAR$(br)6 - HARP$(br)7 - HAT$(br)8 - PLING$(br)9 - SNARE$(br)10 - XYLOPHONE$(br)11 - IRON XYLOPHONE$(br)12 - COW BELL$(br)13 - DIDGERIDOO$(br)"
        },
        {
            "type": "patchouli:text",
            "title": "MUSICAL INSTRUMENTS",
            "text": "$(bold)14 - BIT$(br)15 - BANJO$(br)16 - ZOMBIE$(br)17 - SKELETON$(br)18 - CREEPER$(br)19 - ENDER_DRAGON$(br)20 - WITHER SKELETON$(br)21 - PIGLIN$(br)"
        },
        {
            "type": "patchouli:text",
            "title": "EXTERNAL INT EXAMPLE",
            "text": "$(bold)section .text$(br)mov ss, 0xFF$(br)mov bp, 0xFF$(br)mov sp, bp$(br)mov it, table_section$(br)mov [it], exint$(br)mov flags, 1$(br)mov ax, 5$(br)mov bx, 2$(br)mov cx, 500$(br)back:$(br)int 13"
        },
        {
            "type": "patchouli:text",
            "text": "$(bold)jmp back$(br)section exint$(br)jfe:$(br)cmp r0, 0$(br)jnz jfe$(br)popa$(br)ret 0, 0xFF$(br)section table_section$(br)dw 0 dup(64)"
        },
        {
            "type": "patchouli:text",
			"text": "In this example, the microcontroller keeps ringing until you set the white pin on its front side to a value other than 0. The microcontroller then waits until pin 0 is set back to 0."
        },
        {
            "type": "patchouli:text",
            "title": "EXTERNAL INT EXAMPLE",
            "text": "$(bold)section .text$(br)mov ss, 0xFF$(br)mov bp, 0xFF$(br)mov sp, bp$(br)mov it, table_section$(br)mov ax, it$(br)add ax, 2$(br)mov [ax], exint$(br)mov flags, 1$(br)mov ax, 5$(br)mov bx, 2$(br)mov cx, 500$(br)back:$(br)int 13"
        },
        {
            "type": "patchouli:text",
            "text": "$(bold)jmp back$(br)section exint$(br)jfe:$(br)cmp r1, 0$(br)jnz jfe$(br)popa$(br)ret 0, 0xFF$(br)section table_section$(br)dw 0 dup(64)"
        },
        {
            "type": "patchouli:text",
            "text": "Same as the first example, but the stop pin is 0 (pin 1)."
        }
    ]
}