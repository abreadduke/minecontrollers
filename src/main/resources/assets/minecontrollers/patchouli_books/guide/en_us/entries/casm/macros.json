{
    "name": "Macros",
    "icon": "minecraft:ink_sac",
    "category": "minecontrollers:casm",
    "pages": [
        {
            "type": "patchouli:text",
			"text": "CASM supports macros, reusable instructions that help shorten larger blocks of code into shorter ones."
        },
        {
            "type": "patchouli:text",
            "title": "Single-line macros",
            "text": "Replaces the name of your macro with the specified string.$(br)Example:$(br)$(bold)%define value 5$(br)%define ax_mov mov ax, $(br)ax_mov value$(br)$()Generated code - $(bold) MOV AX, 5"
        },
        {
            "type": "patchouli:text",
            "title": "Multi-line macros",
			"text": "To write macros consisting of more than one line, use the $(bold)%macro$() and $(bold)%endmacro$() directives.$(br)Example:$(br)$(bold)%macro my_macro$(br)mov ax, bx$(br)mov cx, dx$(br)%endmacro$(br)my_macro$(br)int 0$(br)my_macro"
        },
        {
            "type": "patchouli:text",
            "text": "Generated code - $(bold)$(br)MOV AX, BX$(br)MOV CX, DX$(br)INT 0$(br)MOV AX, BX$(br)MOV CX, DX"
        },
        {
            "type": "patchouli:text",
            "title": "Conditional macros",
			"text": "The $(bold)%if$() directive includes the code block up to $(bold)%endif$() if the value after $(bold)%if$() is greater than 0. Otherwise, the code following $(bold)%else$() will be included.$(br)Example:$(br)$(bold)%if 1$(br)mov ax, bx$(br)%else$(br)mov cx, dx$(br)%endif$(br)$()Generated code - $(bold)MOV AX, BX$()"
        },
        {
            "type": "patchouli:text",
			"text": "There's also the $(bold)%ifdef$() directive. It works just like $(bold)%if$(), but it checks if the macro name is already defined$(br)Example:$(br)$(bold)%define macro_name$(br)%ifdef macro_name$(br)mov ax, bx$(br)%else$(br)mov cx, dx$(br)%endif$(br)$()Generated code - $(bold)MOV AX, BX$()"
        },
        {
            "type": "patchouli:text",
            "title": "ORG",
			"text": "This directive is used to set the program offset for microcontroller memory by including OFFSET: [<offset>] in the output$(br)Example:$(br)$(bold)org FF$(br)mov ax, bx$(br)$()When you assemble and run this code, the program will start at byte 0xFF. It also takes segment addresses into account."
        },
        {
            "type": "patchouli:text",
            "title": "Special Characters",
			"text": "Macros can use special characters as arguments. These are replaced with the actual values when the macro is invoked.$(li)$(bold)$[<number>]$() - expands to the argument at that position. $0 is the first argument, $1 is the second, etc.$(li)$(bold)$#$() - expands to the total number of arguments$(li)$(bold)$*$() - expands to all arguments$(br)Example:$(br)$(bold)%macro my_macro"
        },
        {
            "type": "patchouli:text",
            "text": "$(bold)mov $1, $0$(br)%endmacro$(br)my_macro(5, ax)$()$(br)$()Generated code - $(bold)MOV AX, 5"
        }
    ]
}